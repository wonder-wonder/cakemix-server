name: Release

on:
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && startsWith(github.head_ref,'release/')
    steps:
    - name: checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: get new tag
      run: echo "newtag=${GITHUB_HEAD_REF#release/}" >> $GITHUB_ENV
    - name: add tag
      run: |
        git checkout main
        git tag ${{ env.newtag }}
        git push --tags
    - name: create release
      uses: actions/github-script@v4.0.2
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const pr = context.payload.pull_request;
          github.repos.createRelease({
            ...context.repo,
            draft: false,
            tag_name: "${{ env.newtag }}",
            name: "${{ env.newtag }}",
            target_commitish: process.env.GITHUB_SHA,
            body: pr.body
          });
    - name: create PR to develop
      uses: actions/github-script@v4.0.2
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const pr = context.payload.pull_request;
          github.pulls.create({
            ...context.repo,
            head: "main",
            base: "develop",
            title: "Release ${{ env.newtag }} to develop"
          });
    - name: Log in to GitHub Docker Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Build container image
      uses: docker/build-push-action@v2
      with:
        platforms: linux/amd64,linux/arm/v7,linux/arm64
        context: .
        push: true
        tags: |
          ghcr.io/wonder-wonder/cakemix-server:latest
          ghcr.io/wonder-wonder/cakemix-server:${{ env.newtag }}

  hotfix:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && startsWith(github.head_ref,'hotfix/')
    steps:
    - name: checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: get new tag
      run: |
        LASTVER=$(git describe --tags --abbrev=0)
        echo "newtag=${LASTVER%.*}.$(expr ${LASTVER#v*.*.} + 1)" >> $GITHUB_ENV
    - name: add tag
      run: |
        git checkout main
        git tag ${{ env.newtag }}
        git push --tags
    - name: create release
      uses: actions/github-script@v4.0.2
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const pr = context.payload.pull_request;
          github.repos.createRelease({
            ...context.repo,
            draft: false,
            tag_name: "${{ env.newtag }}",
            name: "${{ env.newtag }}",
            target_commitish: process.env.GITHUB_SHA,
            body: "This release includes hotfix.\n\n" + pr.body
          });
    - name: create PR to develop
      uses: actions/github-script@v4.0.2
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const pr = context.payload.pull_request;
          github.pulls.create({
            ...context.repo,
            head: "main",
            base: "develop",
            title: "Release ${{ env.newtag }} to develop"
          });
    - name: Log in to GitHub Docker Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Build container image
      uses: docker/build-push-action@v2
      with:
        platforms: linux/amd64,linux/arm/v7,linux/arm64
        context: .
        push: true
        tags: |
          ghcr.io/wonder-wonder/cakemix-server:latest
          ghcr.io/wonder-wonder/cakemix-server:${{ env.newtag }}

  updatecakemix:
    runs-on: ubuntu-latest
    steps:
    - name: update cakemix repo
      env:
        CAKEMIX_SSHKEY: ${{secrets.CAKEMIX_SSHKEY}}
      run: |
        mkdir ~/.ssh
        echo "${CAKEMIX_SSHKEY}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        git clone git@github.com:wonder-wonder/cakemix.git
        cd cakemix
        git checkout main && git submodule init && git submodule update
        cd cakemix-server && git checkout main && git pull && cd ..
        cd cakemix-front && git checkout main && git pull && cd ..
        git config --global user.email "github@actions"
        git config --global user.name "github-actions"
        git add . && git commit -m "Update for main" && git push || echo "Nothing to update. Abort."
